from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.deep_linking import create_start_link
from aiogram.utils.keyboard import InlineKeyboardBuilder

import api
import callbacks
import keyboards

router = Router()


async def get_menu_data(chat_id, state):
    profile, _ = await api.user_detail(chat_id)
    await state.set_data(profile)
    subscription = profile.get("subscription")
    if subscription:
        subscription = f"–¥–æ {subscription}"
    menu_text = (
        f"ü™ô *–¢–æ–∫–µ–Ω—ã:* {profile['tokens']}\n\n"
        f"üîî *–ü–æ–¥–ø–∏—Å–∫–∞:* {subscription or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìã *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:*"
    )
    return menu_text


@router.message(Command("menu"))
async def process_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    keyboard = await keyboards.get_menu_keyboard(message.message_id)
    await message.answer(
        text=await get_menu_data(message.from_user.id, state),
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data == "menu")
async def process_menu(callback_query: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    keyboard = await keyboards.get_menu_keyboard(callback_query.message.message_id)
    await callback_query.message.edit_text(
        text=await get_menu_data(callback_query.from_user.id, state),
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data == "referral")
async def process_referral(callback_query: CallbackQuery, state: FSMContext) -> None:
    link = await create_start_link(callback_query.bot, str(callback_query.from_user.id), encode=True)
    await state.clear()
    link = link.replace('.', '\.').replace("=", "\=").replace("_", "\_")
    await callback_query.message.answer(
        text=(
            "üéÅ *–ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π\!*\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\!\n\n"
            "üë• *–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 —Ç–æ–∫–µ–Ω–æ–≤\.*\n\n"
            "üéÅ *–í–∞—à –¥—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç 10 —Ç–æ–∫–µ–Ω–æ–≤\.*\n\n"
            "üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* \n\n"
            f"{link}"
        ),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=await keyboards.get_close_keyboard()
    )


@router.callback_query(callbacks.Token.filter(F.action == callbacks.Action.get))
async def process_buy_tokens(callback_query: CallbackQuery):
    keyboard = await keyboards.get_token_keyboard()
    await callback_query.message.answer(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:*",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
    )


@router.callback_query(callbacks.Token.filter(F.action == callbacks.Action.add))
async def process_add_tokens(
        callback_query: CallbackQuery,
        callback_data: callbacks.Token,
):
    builder = InlineKeyboardBuilder()
    message = await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{callback_data.value} —Ç–æ–∫–µ–Ω–æ–≤*\n"
        f"–¶–µ–Ω–∞: *{callback_data.price}‚ÇΩ*\n\n"
        f"*‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.. *",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    response, status = await api.create_payment(
        callback_query.from_user.id,
        callback_data.value,
        callback_data.price,
        message.message_id,
    )
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=response["url"])
    builder.adjust(1)
    await message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{callback_data.value} —Ç–æ–∫–µ–Ω–æ–≤*\n"
        f"–¶–µ–Ω–∞: *{callback_data.price}‚ÇΩ*\n\n"
        f"*‚úÖ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(callbacks.Subscribe.filter(F.action == callbacks.Action.get))
async def process_buy_subscription(
        callback_query: CallbackQuery,
        callback_data: callbacks.Subscribe,
):
    keyboard = await keyboards.get_subscription_keyboard()

    await callback_query.message.answer(
        f"*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:*\n",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
    )
