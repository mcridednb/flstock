from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

import api
import callbacks
import states

router = Router()

#         f"üë§ *–ò–º—è:* {profile['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
#         f"üõ†Ô∏è *–ù–∞–≤—ã–∫–∏:* {profile['skills'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
#         f"üìù *–û —Å–µ–±–µ:* {profile['summary'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
#         f"üíº *–û–ø—ã—Ç:* {profile['experience'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
#         f"‚è∞ *–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:* {profile['hourly_rate'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"


async def check_user_data(chat_id):
    user_data, _ = await api.user_detail(chat_id)
    text = []
    if not user_data["name"]:
        text.append(">\n> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è")
    if not user_data["skills"]:
        text.append(">\n> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–≤—ã–∫–∏")
    if not user_data["summary"]:
        text.append(">\n> ‚Äî –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    if not user_data["experience"]:
        text.append(">\n> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω –æ–ø—ã—Ç")
    if not user_data["hourly_rate"]:
        text.append(">\n> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ —á–∞—Å")
    if text:
        text.insert(0, ">‚ö†Ô∏è –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ:")
        text.append(
            ">\n>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ "
            "–∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è\."
        )
    return "\n".join(text)


@router.callback_query(callbacks.Project.filter(F.action == callbacks.Action.response))
async def process_gpt_response(
    callback_query: CallbackQuery,
    callback_data: callbacks.Project,
    state: FSMContext
):
    await state.set_state(states.GPT.start_response)

    warning_text = await check_user_data(callback_query.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.start,
            project_id=callback_data.id,
        )
    )
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="close")
    builder.adjust(1)
    message = await callback_query.message.reply(
        text=warning_text + "‚úèÔ∏è *–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –ò–ò:*\n\n"
             "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
             "–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–∞\.\n\n"
             "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2,
    )

    await state.set_data({
        "project_id": callback_data.id,
        "message_id": callback_query.message.message_id,
        "request_type": callback_data.action,
        "delete_message_id": message.message_id,
    })


@router.callback_query(states.GPT.start_response, callbacks.GPTRequest.filter(F.action == callbacks.Action.start))
async def process_gpt_response(
    callback_query: CallbackQuery,
    callback_data: callbacks.Project,
    state: FSMContext
):
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.complain,
            project_id=data["project_id"],
        )
    )
    message = await callback_query.message.edit_text(
        text="üîÑ *–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫...*\n\n"
             "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        data["project_id"],
        callback_query.from_user.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
    )

    await state.clear()


@router.message(states.GPT.start_response)
async def process_gpt_response(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    additional_info = message.text

    await message.bot.delete_message(message.from_user.id, data["delete_message_id"])
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.complain,
            project_id=data["project_id"],
        )
    )
    message = await message.answer(
        text="üîÑ *–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫...*\n\n"
             "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        data["project_id"],
        message.chat.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
        additional_info=additional_info,
    )

    await state.clear()


@router.callback_query(callbacks.Project.filter(F.action == callbacks.Action.analyze))
async def process_gpt_analyze(
    callback_query: CallbackQuery,
    callback_data: callbacks.Project,
    state: FSMContext
):
    await state.set_state(states.GPT.start_analyze)

    warning_text = await check_user_data(callback_query.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.start,
            project_id=callback_data.id,
        )
    )
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="close")
    builder.adjust(1)
    message = await callback_query.message.reply(
        text=warning_text + "‚úèÔ∏è *–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –ò–ò:*\n\n"
             "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–æ –∂–µ–ª–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, "
             "–∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
             "–∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\.\n\n"
             "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2,
    )

    await state.set_data({
        "project_id": callback_data.id,
        "message_id": callback_query.message.message_id,
        "request_type": callback_data.action,
        "delete_message_id": message.message_id,
    })


@router.callback_query(states.GPT.start_analyze, callbacks.GPTRequest.filter(F.action == callbacks.Action.start))
async def process_gpt_analyze(
    callback_query: CallbackQuery,
    callback_data: callbacks.Project,
    state: FSMContext
):
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.complain,
            project_id=data["project_id"],
        )
    )
    message = await callback_query.message.edit_text(
        text="‚öôÔ∏è *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É...*\n\n"
             "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        data["project_id"],
        callback_query.from_user.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
    )

    await state.clear()


@router.message(states.GPT.start_analyze)
async def process_gpt_response(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    additional_info = message.text

    await message.bot.delete_message(message.from_user.id, data["delete_message_id"])
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            action=callbacks.Action.complain,
            project_id=data["project_id"],
        )
    )
    message = await message.answer(
        text="‚öôÔ∏è *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É...*\n\n"
             "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.*",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
        reply_to_message_id=data["message_id"],
    )
    await api.gpt_request_create(
        data["project_id"],
        message.chat.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
        additional_info=additional_info,
    )

    await state.clear()
