from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

import api
import callbacks
import states

router = Router()


async def check_user_data(user_data):
    text = []
    if not user_data["name"]:
        text.append(">\n> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è")
    if not user_data["skills"]:
        text.append("> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–≤—ã–∫–∏")
    if not user_data["summary"]:
        text.append("> ‚Äî –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    if not user_data["experience"]:
        text.append("> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω –æ–ø—ã—Ç")
    if not user_data["hourly_rate"]:
        text.append("> ‚Äî –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ —á–∞—Å")
    if text:
        text.insert(0, ">‚ö†Ô∏è –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ:")
        text.append(
            ">\n>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ "
            "–∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è\.\n"
            ">\n>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /profile\n\n\n"
        )
    return "\n".join(text)


async def process_phone(message, state, add_text=""):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.reply(
        "‚ÑπÔ∏è *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AI ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.*" + add_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )
    await state.set_state(states.GPT.phone)


@router.message(states.GPT.phone)
async def send_phone(message: Message, state: FSMContext):
    if not message.contact:
        await process_phone(
            message, state, "\n\n*–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏èÔ∏è*"
        )
        return

    await api.user_patch(message, "phone", message.contact.phone_number)

    data = await state.get_data()
    user_data = data["user_data"]

    warning_text = await check_user_data(user_data)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
        callback_data=callbacks.GPTRequest(
            type=data["request_type"],
            action=callbacks.Action.start,
            project_id=data["project_id"],
            message_id=data["message_id"],
        )
    )
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="close")
    builder.adjust(1)

    if data["request_type"] == "response":
        text = (
                "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞\.\.\.*\n\n"
                + warning_text +
                "üìù –®–∞–≥ 1 –∏–∑ 2: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç–∫–ª–∏–∫—É\n\n"
                "\n‚úèÔ∏è *–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –ò–ò:*\n\n"
                "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                "–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–∞\.\n\n"
                "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*"
        )
        await state.set_state(states.GPT.start_response)
        message_to_delete = await message.answer(
            "üëç *–û—Ç–ª–∏—á–Ω–æ.*\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–∏–∫–∞...",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN,
        )
        await message_to_delete.delete()
    else:
        text = (
                "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞\.\.\.*\n\n"
                + warning_text +
                "üìù –®–∞–≥ 1 –∏–∑ 2: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞\n\n"
                "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, "
                "–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                "–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É\.\n\n"
                "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*"
        )
        await state.set_state(states.GPT.start_analyze)
        message_to_delete = await message.answer(
            "üëç *–û—Ç–ª–∏—á–Ω–æ.* \n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞...",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN,
        )
        await message_to_delete.delete()
    message = await message.bot.send_message(
        message.from_user.id,
        text,
        reply_to_message_id=data["message_id"],
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2,
    )
    await state.update_data({"delete_message_id": message.message_id})


@router.callback_query(callbacks.Project.filter(F.type == callbacks.Type.response))
async def process_gpt_response(
    callback_query: CallbackQuery,
    callback_data: callbacks.Project,
    state: FSMContext
):
    gpt_map = {
        callbacks.Type.response: states.GPT.start_response,
        callbacks.Type.analyze: states.GPT.start_analyze,
    }
    await state.set_state(gpt_map[callback_data.type])

    user_data, _ = await api.user_detail(callback_query.from_user.id)

    data = {
        "user_data": user_data,
        "project_id": callback_data.id,
        "message_id": callback_query.message.message_id,
        "request_type": callback_data.type,
    }
    await state.set_data(data)

    if not user_data.get("phone"):
        await process_phone(callback_query.message, state)
        return

    warning_text = await check_user_data(user_data)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
        callback_data=callbacks.GPTRequest(
            type=callback_data.type,
            action=callbacks.Action.start,
            project_id=callback_data.id,
            message_id=callback_query.message.message_id,
        )
    )
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="close")
    builder.adjust(1)
    message = await callback_query.message.reply(
        text=(
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞\.\.\.*\n\n"
            + warning_text +
            "üìù –®–∞–≥ 1 –∏–∑ 2: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç–∫–ª–∏–∫—É\n\n"
            "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
            "–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–∞\.\n\n"
            "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*"
        ),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2,
    )

    await state.update_data({"delete_message_id": message.message_id})


@router.callback_query(
    callbacks.GPTRequest.filter((F.type == callbacks.Type.response) & (F.action == callbacks.Action.start))
)
async def process_gpt_response_start(
        callback_query: CallbackQuery,
        callback_data: callbacks.GPTRequest,
        state: FSMContext
):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            type=callbacks.Type.complain,
            project_id=callback_data.project_id,
        )
    )
    message = await callback_query.message.edit_text(
        text=(
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞...*\n\n"
            "üìù –®–∞–≥ 2 –∏–∑ 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
            "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*"
        ),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        callback_data.project_id,
        callback_query.from_user.id,
        message_id=callback_data.message_id,
        delete_message_id=message.message_id,
        request_type=callback_data.type,
    )

    await state.clear()


@router.message(states.GPT.start_response)
async def process_gpt_response_with_add_info(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    additional_info = message.text

    await message.bot.delete_message(message.from_user.id, data["delete_message_id"])
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            type=callbacks.Type.complain,
            project_id=data["project_id"],
        )
    )
    message = await message.answer(
        text=(
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞...*\n\n"
            "üìù –®–∞–≥ 2 –∏–∑ 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
            "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*"
        ),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        data["project_id"],
        message.chat.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
        additional_info=additional_info,
    )

    await state.clear()


@router.callback_query(callbacks.Project.filter(F.type == callbacks.Type.analyze))
async def process_gpt_analyze(
        callback_query: CallbackQuery,
        callback_data: callbacks.Project,
        state: FSMContext
):
    await state.set_state(states.GPT.start_analyze)

    user_data, _ = await api.user_detail(callback_query.from_user.id)

    data = {
        "user_data": user_data,
        "project_id": callback_data.id,
        "message_id": callback_query.message.message_id,
        "request_type": callback_data.type,
    }
    await state.set_data(data)

    if not user_data.get("phone"):
        await process_phone(callback_query.message, state)
        return

    warning_text = await check_user_data(user_data)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
        callback_data=callbacks.GPTRequest(
            type=callback_data.type,
            action=callbacks.Action.start,
            project_id=callback_data.id,
            message_id=callback_query.message.message_id,
        )
    )
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="close")
    builder.adjust(1)
    text = (
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞\.\.\.*\n\n"
            + warning_text +
            "üìù –®–∞–≥ 1 –∏–∑ 2: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç—á—ë—Ç—É\n\n"
            "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –∏–ª–∏ –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, "
            "–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
            "–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É\.\n\n"
            "‚ÜòÔ∏è *–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*"
    )
    message = await callback_query.message.reply(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2,
    )

    await state.update_data({"delete_message_id": message.message_id})


@router.callback_query(
    callbacks.GPTRequest.filter((F.type == callbacks.Type.analyze) & (F.action == callbacks.Action.start))
)
async def process_gpt_analyze_start(
        callback_query: CallbackQuery,
        callback_data: callbacks.GPTRequest,
        state: FSMContext
):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            type=callbacks.Type.complain,
            project_id=callback_data.project_id,
        )
    )
    message = await callback_query.message.edit_text(
        text=(
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...*\n\n"
            "üìù –®–∞–≥ 2 –∏–∑ 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
            "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*"
        ),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await api.gpt_request_create(
        callback_data.project_id,
        callback_query.from_user.id,
        message_id=callback_data.message_id,
        delete_message_id=message.message_id,
        request_type=callback_data.type,
    )

    await state.clear()


@router.message(states.GPT.start_analyze)
async def process_gpt_response_with_add_info(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    additional_info = message.text

    await message.bot.delete_message(message.from_user.id, data["delete_message_id"])
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        callback_data=callbacks.GPTRequest(
            type=callbacks.Type.complain,
            project_id=data["project_id"],
        )
    )
    message = await message.answer(
        text=(
            "‚öôÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...*\n\n"
            "üìù –®–∞–≥ 2 –∏–∑ 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
            "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*"
        ),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN,
        reply_to_message_id=data["message_id"],
    )
    await api.gpt_request_create(
        data["project_id"],
        message.chat.id,
        message_id=data["message_id"],
        delete_message_id=message.message_id,
        request_type=data["request_type"],
        additional_info=additional_info,
    )

    await state.clear()
