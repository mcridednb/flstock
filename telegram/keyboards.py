from aiogram.utils.keyboard import InlineKeyboardBuilder

import api
import callbacks
from states import Registration


async def get_subscriptions_keyboard(chat_id, category_code):
    subcategories, _ = await api.subcategories_list(chat_id, category_code)

    builder = InlineKeyboardBuilder()
    for subcategory in subcategories:
        title = subcategory["title"]
        if subcategory["is_subscribed"]:
            title = f"‚úÖ {title}"
        builder.button(
            text=title,
            callback_data=callbacks.Subcategory(
                action=callbacks.Action.set,
                code=subcategory["code"]
            ),
        )

    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back",
    )

    builder.adjust(1)
    return builder.as_markup()


async def get_categories_keyboard(message, state):
    categories, _ = await api.categories_list(message)

    builder = InlineKeyboardBuilder()
    for category in categories:
        title = category["title"]
        if category["is_subscribed"]:
            title = f"‚úÖ {title}"
        builder.button(
            text=title,
            callback_data=callbacks.Category(
                action=callbacks.Action.set,
                code=category["code"]
            ),
        )

    state = await state.get_state()
    if state in [Registration.category, Registration.subcategory]:
        builder.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next")
    else:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="notifications")

    builder.adjust(1)
    return builder.as_markup()


async def get_sources_keyboard(message, state):
    sources, _ = await api.sources_list(message)
    builder = InlineKeyboardBuilder()
    for source in sources:
        title = source["title"]
        if source["is_subscribed"]:
            title = f"‚úÖ {title}"
        builder.button(
            text=title,
            callback_data=callbacks.Source(
                action=callbacks.Action.set,
                code=source["code"],
            )
        )

    state = await state.get_state()
    if state in [Registration.source]:
        builder.button(
            text="–î–∞–ª–µ–µ ‚û°Ô∏è",
            callback_data="next",
        )
    else:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="notifications",
        )

    builder.adjust(1)
    return builder.as_markup()


async def get_close_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data="close",
    )
    builder.adjust(1)
    return builder.as_markup()


async def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üö´ –û—Ç–º–µ–Ω–∞",
        callback_data="close",
    )
    builder.adjust(1)
    return builder.as_markup()


async def get_menu_keyboard(message_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.button(text="üîî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")
    builder.button(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")
    # builder.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    builder.button(
        text="ü™ô –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã",
        callback_data=callbacks.Token(
            action=callbacks.Action.get,
        ),
    )
    builder.button(
        text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data=callbacks.Subscribe(
            action=callbacks.Action.get,
            message_id=message_id
        ),
    )
    builder.button(text="‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")
    builder.button(text="üó£ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    builder.adjust(1)
    return builder.as_markup()


async def get_balance_keyboard(message_id):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü™ô –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã",
        callback_data=callbacks.Token(
            action=callbacks.Action.get,
        ),
    )
    builder.button(
        text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data=callbacks.Subscribe(
            action=callbacks.Action.get,
            message_id=message_id
        ),
    )
    builder.button(text="‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    builder.adjust(1)
    return builder.as_markup()


async def get_notifications_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üåê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources")
    builder.button(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")
    builder.button(text="üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="change_keywords")
    builder.button(text="‚õîÔ∏è –ú–∏–Ω—É—Å —Å–ª–æ–≤–∞", callback_data="change_stop_words")
    builder.button(text="ü´∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", callback_data="change_min_price")
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")
    builder.adjust(1)
    return builder.as_markup()


async def get_change_profile_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –ò–º—è", callback_data="change_name")
    builder.button(text="üõ†Ô∏è –ù–∞–≤—ã–∫–∏", callback_data="change_skills")
    builder.button(text="üìù –û —Å–µ–±–µ", callback_data="change_summary")
    builder.button(text="üíº –û–ø—ã—Ç", callback_data="change_experience")
    builder.button(text="‚è∞ –°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å", callback_data="change_hourly_rate")
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")
    builder.adjust(1)
    return builder.as_markup()


async def get_token_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü™ô 40 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 190‚ÇΩ",  # 4,75
        callback_data=callbacks.Token(
            action=callbacks.Action.add,
            price=190,
            value=40,
        ),
    )
    builder.button(
        text="üí∞ 200 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 740‚ÇΩ",  # 3,7
        callback_data=callbacks.Token(
            action=callbacks.Action.add,
            price=740,
            value=200,
        ),
    )
    builder.button(
        text="üíé 400 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 1190‚ÇΩ",  # 3
        callback_data=callbacks.Token(
            action=callbacks.Action.add,
            price=1190,
            value=400,
        ),
    )
    builder.adjust(1)
    return builder.as_markup()


async def get_subscription_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üëç 1 –º–µ—Å—è—Ü ‚Äî 35 —Ç–æ–∫–µ–Ω–æ–≤",  # 35
        callback_data=callbacks.Subscribe(
            action=callbacks.Action.add,
            tokens=35,
            value=30,
        ),
    )
    builder.button(
        text="üí™ 3 –º–µ—Å—è—Ü–∞ ‚Äî 90 —Ç–æ–∫–µ–Ω–æ–≤",  # 30
        callback_data=callbacks.Subscribe(
            action=callbacks.Action.add,
            tokens=90,
            value=90,
        ),
    )
    builder.button(
        text="üöÄ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 150 —Ç–æ–∫–µ–Ω–æ–≤",  # 25
        callback_data=callbacks.Subscribe(
            action=callbacks.Action.add,
            tokens=150,
            value=180,
        ),
    )
    builder.adjust(1)
    return builder.as_markup()


async def get_tasks_keyboard(message, state):
    tasks, _ = await api.tasks_list(message)
    builder = InlineKeyboardBuilder()
    for task in tasks:
        title = task["title"]
        if task["done"]:
            title = f"‚úÖ {title}"
        builder.button(
            text=title,
            callback_data=callbacks.Task(
                action=callbacks.Action.set,
                code=source["code"],
            )
        )

    state = await state.get_state()
    if state in [Registration.source]:
        builder.button(
            text="–î–∞–ª–µ–µ ‚û°Ô∏è",
            callback_data="next",
        )
    else:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="notifications",
        )

    builder.adjust(1)
    return builder.as_markup()